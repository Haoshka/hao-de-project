#get SOL price via API
https://api.coingecko.com/api/v3/coins/solana/ohlc?vs_currency=usd&days=1

#Kestra Script

#fetch price info
id: fetch-solana
type: io.kestra.plugin.http.Request
method: GET
url: https://api.coingecko.com/api/v3/coins/solana/ohlc?vs_currency=usd&days=1

#json to csv
id: convert-json-csv
type: io.kestra.plugin.scripts.python.Python
inputFiles:
  input.json: "{{ outputs.fetch-solana.body }}"
script: |
  import json
  import csv

  with open('input.json') as f:
      data = json.load(f)

  with open('output.csv', 'w', newline='') as csvfile:
      writer = csv.writer(csvfile)
      writer.writerow(['timestamp', 'open', 'high', 'low', 'close'])
      for row in data:
          writer.writerow(row)

#upload to the GCP Bucket
id: upload-to-gcs
type: io.kestra.plugin.gcp.gcs.Upload
bucket: your-bucket-name
from: output.csv
to: solana/ohlc_{{ execution.startTime | date("yyyyMMdd_HHmm") }}.csv

#load into Bigquery
id: load-bigquery
type: io.kestra.plugin.gcp.bigquery.Load
dataset: your_dataset
table: solana_prices
sourceUris:
  - gs://your-bucket-name/solana/ohlc_*.csv
format: CSV
autodetect: true


#YAML file to wrap everything 
id: solana-ohlc-to-bigquery
namespace: crypto.analytics
description: |
  Fetch hourly OHLC data for Solana from CoinGecko, convert to CSV, store in GCS, and load into BigQuery.
tasks:
  - id: fetch-solana
    type: io.kestra.plugin.http.Request
    method: GET
    url: https://api.coingecko.com/api/v3/coins/solana/ohlc
    query:
      vs_currency: usd
      days: 1
    retry:
      maxAttempts: 3

  - id: convert-json-csv
    type: io.kestra.plugin.scripts.python.Python
    inputFiles:
      input.json: "{{ outputs.fetch-solana.body }}"
    script: |
      import json
      import csv

      with open("input.json") as f:
          data = json.load(f)

      with open("ohlc.csv", "w", newline="") as f:
          writer = csv.writer(f)
          writer.writerow(["timestamp", "open", "high", "low", "close"])
          for row in data:
              writer.writerow([int(row[0] / 1000), row[1], row[2], row[3], row[4]])  # timestamp in seconds

  - id: upload-to-gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    bucket: your_bucket_name
    from: ohlc.csv
    to: solana/ohlc_{{ execution.startTime | date("yyyyMMdd_HHmm") }}.csv

  - id: load-to-bigquery
    type: io.kestra.plugin.gcp.bigquery.Load
    dataset: your_dataset_name
    table: solana_ohlc
    sourceUris:
      - gs://your_bucket_name/solana/ohlc_{{ execution.startTime | date("yyyyMMdd_HHmm") }}.csv
    writeDisposition: WRITE_APPEND
    schema:
      fields:
        - name: timestamp
          type: TIMESTAMP
        - name: open
          type: FLOAT
        - name: high
          type: FLOAT
        - name: low
          type: FLOAT
        - name: close
          type: FLOAT
    format: CSV
    skipLeadingRows: 1
    autodetect: false
